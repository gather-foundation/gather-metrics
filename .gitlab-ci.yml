# image: REPLACE_WITH_YOUR_DESIRED_IMAGE

cache:
  key: "cache-$CI_COMMIT_REF_SLUG"
  paths:
    - REPLACE_WITH_CACHE_PATH
    # Replace with the path for the cached dependencies (e.g. src src/node_modules)

default:
  before_script:
    - echo "Navigating to source code directory"
    # Add below a script to navigate to the project's source code dir (e.g. "cd src")
    - echo "Installing dependencies"
    # Replace the echo statement with the relevant script to install dependencies for your language/framework

stages:
  - build
  - test
  - deploy_pre_production
  - deploy_production
  - update_docker_image

build:
  stage: build
  script:
    - echo "Building the project"
    # Replace the echo statement with the relevant script to build your project for your language/framework
  artifacts:
    name: "artifacts-$CI_COMMIT_REF_NAME"
    expire_in: 1h
    paths:
      - REPLACE_WITH_PATH_TO_BUILD
      # Replace with the path of the project's build output folder (e.g. "src/dist")
  rules:
    - if: '$CI_COMMIT_BRANCH == "development" || $CI_COMMIT_BRANCH == "main"'

test:
  stage: test
  script:
    - echo "Running tests"
    # Replace the echo statement with the relevant script to run tests for your language/framework

deploy_pre_production:
  stage: deploy_pre_production
  script:
    - echo "Deploying to pre-production environment"
    - echo "Retrieving project artifacts"
    # Add below a script to navigate to the project's artifacts (e.g. "cd dist")
    # Add below the relevant script to deploy your application to the pre-production environment
  needs: [build, test]
  dependencies:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'

deploy_production:
  stage: deploy_production
  script:
    - echo "Deploying to production environment"
    - echo "Retrieving project artifacts"
    # Add below a script to navigate to the project's artifacts (e.g. "cd dist")
    # Add below the relevant script to deploy your application to the production environment
  needs: [build, test]
  dependencies:
    - build
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'

update_docker_image:
  stage: update_docker_image
  image: $DEPLOY_HOST:$DEPLOY_PORT/docker:stable
  before_script:
    # We need to skip the global before_script since the image building docker
    # doesn't have python/node installed
    - echo "Skipping before_script for docker build"
  script:
    - cd PATH_TO_DOCKERFILE_FOLDER
    # Replace with the path to the directory where the Dockerfile is stored
    - echo "Building main Docker image"
    # Add your Docker build commands for the main image here
    - echo "Pushing Docker image to the Docker registry"
    # Add your Docker push commands here
  needs: [build, test, deploy_production]
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
